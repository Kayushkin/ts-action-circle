// document.createElement
// document.body.appendChild(...)
// someNode.style.someCssProperty = someShit

type Bullet = Circle
type BadGuy = Circle & Fighter
type CircleMan = Circle & Fighter & {
  spd: number
}
type Fighter = Circle & {
  hp: number
  isHitstunned: number
}

interface Circle {
  x: number
  y: number
  radius: number
  color: string
  v: Vec2D
}


interface Vec2D {
  x: number
  y: number
}

document.body.parentElement!.style.height = '100%'
document.body.style.height = '100%'
document.body.style.margin = '0'

let canvas = document.createElement('canvas')
canvas.width = 800
canvas.height = 600
canvas.style.backgroundColor = 'gray'
document.body.appendChild(canvas)

let ctx = canvas.getContext('2d')

let lastFrame = Date.now()
let lastShot = Date.now()

let keys = {
  up: false,
  down: false,
  left: false,
  right: false,
  fire: false
}

let mousePosition: Vec2D = {x: 200, y: 200}

let circleMan: CircleMan = {
  x: 100,
  y: 100,
  radius: 50,
  color: 'blue',
  v: {x:0, y:0},
  hp: 5,
  isHitstunned: 0,
  spd: 0.5
}

let bullets: Bullet[] = [
]

let badGuys: BadGuy[] = [
  { x: 200, y: 200, radius: 50, color: 'green', v: {x: 0.1, y: 0.1}, hp: 70, isHitstunned: 0 }
]

const magnitude = (vec: Vec2D): number => Math.sqrt(vec.x * vec.x + vec.y * vec.y)

const normalize = (vec: Vec2D): Vec2D => {
    const m = magnitude(vec)
    if (m === 0) return {x: 0, y: 0}
    return {
      x: vec.x / m,
      y: vec.y / m,
    }
}

const scale = (vec: Vec2D, s: number): Vec2D => ({
  x: vec.x * s,
  y: vec.y * s,
})

const isCollision = (circle1: Circle, circle2: Circle) => {
  let differenceVec = {x: (circle1.x - circle2.x), y: (circle1.y - circle2.y)}
  if (magnitude(differenceVec) < (circle2.radius + circle1.radius)) {
    return true
  } else return false
}

const drawCircle = (circle: Circle) => {
  if (ctx === null) return

  ctx.fillStyle = circle.color
  ctx.beginPath()
  ctx.arc(circle.x, circle.y, circle.radius, 0, 2 * Math.PI)
  ctx.closePath()
  ctx.fill()
}

const knockback = (knockbacker: Circle, knockbackee: Circle, magnitude: number) => {
  let kbVec = {x: (knockbackee.x - knockbacker.x), y: (knockbackee.y - knockbacker.y)}
  let normalKbVec = normalize(kbVec)
  return {x: normalKbVec.x * magnitude, y: normalKbVec.y * magnitude}
}

const isOob = (circle: Circle) => circle.x < -circle.radius || circle.x > (canvas.width + circle.radius) || circle.y < -circle.radius || circle.y > (canvas.height + circle.radius)

const continueMoving = (circle: Circle) => {
  circle.x += circle.v.x
  circle.y += circle.v.y
}

const continueMovingFighter = (fighter: Fighter) => {
  if (fighter.isHitstunned < 1) {
    continueMoving(fighter)
  } 
}

const loop = () => {
  window.requestAnimationFrame(loop)
  let time = Date.now()
  update(time - lastFrame) // TODO delta
  render()
  lastFrame = time
}

const render = () => {
  if (ctx === null) return

  // clear screen
  ctx.fillStyle = 'gray'
  ctx.fillRect(0, 0, canvas.width, canvas.height)

  drawCircle(circleMan)
  badGuys.forEach(drawCircle)
  bullets.forEach(drawCircle)
}

const update = (dt: number) => {
  circleMan.v = {x:0, y:0}
  if (keys.up) circleMan.v.y -= 1
  if (keys.down) circleMan.v.y += 1
  if (keys.left) circleMan.v.x -= 1
  if (keys.right) circleMan.v.x += 1
  circleMan.v = scale(normalize(circleMan.v), circleMan.spd * dt)
  if (circleMan.isHitstunned < 1) {
    continueMovingFighter(circleMan)
  } else {
    circleMan.isHitstunned -= dt
  }
  let firingDirection = {x: mousePosition.x - circleMan.x, y: mousePosition.y - circleMan.y}
  let normalizedFiringVector = normalize(firingDirection)
  if (keys.fire) {
    if (Date.now() - lastShot > 100) { 
      bullets.push({ x: circleMan.x, y: circleMan.y, radius: 5, color: 'red', v: {x: normalizedFiringVector.x, y: normalizedFiringVector.y} })
      lastShot = Date.now()
    }
  }
  bullets.forEach((bullet, idx) => {
    continueMoving(bullet)
    if (isOob(bullet)) {
      bullets.splice(idx, 1)
    }
  })
  badGuys.forEach((badGuy, badGuyIdx) => {
    continueMovingFighter(badGuy)
    if (isCollision(badGuy, circleMan)) {
      let badGuyVec: Vec2D = knockback(badGuy, circleMan, 5)
      badGuy.x -= badGuyVec.x
      badGuy.y -= badGuyVec.y
    }
    if (badGuy.isHitstunned > 0) {
      badGuy.isHitstunned -= 1
    }
    if (isOob(badGuy)) {
      badGuys.splice(badGuyIdx, 1)
    } else {
    bullets.forEach((bullet, bulletIdx) => {
      if (isCollision(badGuy, bullet)) {
        badGuy.hp -= 1
        badGuy.isHitstunned += 10
        let bulletKbVec: Vec2D = knockback(badGuy, bullet, 10)
        badGuy.x -= bulletKbVec.x
        badGuy.y -= bulletKbVec.y
        if (badGuy.hp < 1) {
          badGuys.splice(badGuyIdx, 1)
        }
        bullets.splice(bulletIdx, 1)
      }
    })}
  })
}

window.addEventListener('keydown', evt => {
  switch (evt.code) {
    case 'KeyE':
      keys.up = true
      break
    case 'KeyD':
      keys.down = true
      break
    case 'KeyS':
      keys.left = true
      break
    case 'KeyF':
      keys.right = true
      break
  }
})

const onMouseMove = (evt: MouseEvent) => {
  mousePosition = {x: evt.pageX, y: evt.pageY}
}

window.addEventListener('mousedown', evt => {
  keys.fire = true
  mousePosition = {x: evt.pageX, y: evt.pageY}
  window.addEventListener('mousemove', onMouseMove)
})

window.addEventListener('mouseup', evt => {
  keys.fire = false
  window.removeEventListener('mousemove', onMouseMove)
})

window.addEventListener('keyup', evt => {
  switch (evt.code) {
    case 'KeyE':
      keys.up = false
      break
    case 'KeyD':
      keys.down = false
      break
    case 'KeyS':
      keys.left = false
      break
    case 'KeyF':
      keys.right = false
      break
  }
})

const myAdd: () => number = function (
 ): number {
  return 1;
};

const myAddNathanV = () => {
  return 1
}

loop()
